<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="alert_Picture_Box.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAMAAAD8CC+4AAAABGdBTUEAALGPC/xhBQAAAapQTFRFAgdd
        HiJvICRwIiZxIydyJChzJSlzJip0Jyt1KCx1Ki52Ky93LTF4LzN6MDR6MjZ7NDh9NTl9Nzt/OTyAOj2B
        PD+CPUCCPkGDP0KEQUSFQUWGQ0eHRUmIRkqJSEyKSk6LS0+MTVGNT1OPUFSPUlaQU1eRVFiSVVmSVlqT
        V1uUWFyUWl6WXF+XXWCXX2KZYWSaYmWbZGecZmmdZ2qeaGueaWyfa26gbG+hbnGib3KjcHOkcXSkc3al
        dHemdnmneHupeXype36rfYCsfoGsgIOugYOug4WwhIawhoixh4myiIqziYuzi421jI61jpC3kJK4kZO4
        k5W6lZe7lpi8mJq9mpy+m52/nZ/AnqDBn6HBoKLCoqTDo6XEpabFp6jGqKnHqqvIrK3Kra7Kr7DMsbLN
        srPNtLXPtrfQt7jRubrSurvTvL3Uvr/Vv8DWwMLXwsTYw8XZxcfax8nbyMrcysvdzM3fzc7fz9Dh0NHh
        0dLi0tPi09Tj1NXk1dbk1tfl19jm2Nnm2drn2tvn3N3p3d7p3t/q3+Dr4eLs4+Tt5+jw6erx6+zy+vr8
        ////vQRCqAAADYVJREFUeF7t3Wn39nMZhfGUBjJlKDJGg4whQ5lzhwYqKoUyj2UIN6WBpCh5z+0HR63l
        QauW9d/3ea619+fhfnCt8/c9XsD1kfcrTqMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRAjR6o0QM1eqBG
        D9TogRo9UKMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRAjR6o0QM1
        eqBGD9TogRo9UKMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRAjR6o
        0QM1eqBGD9TogRo9UKMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRAjR6o0QM1eqBGD9TogRo9UKMHavRA
        jR6o0QM1eqBGD9TogRo9UKMHavRAjR6o0QO5ox9THwKP5+KO/pH6EHg8l0bfiMdzafSNeDyXRt+Ix3Np
        9I14PJdG34jHc2n0jXg8l0bfiMdzafSNeDyXIxf9zfofeCjh8VyOXHSG+q94KGFwafQ9eChhcGn0PXgo
        YXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0
        PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChh
        cGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9
        eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFw
        afQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14
        KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp
        9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgo
        YXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0PXgoYXBp9D14KGFwafQ9eChhcGn0
        PXgoYXAJjP7Pw4cPv/b2f/ydeR4PJQwugdHf5SAcxTyPg4TBJTD6OxyEjzLP4yBhcAmM/jcOwseY53GQ
        MLgERv8rB+Fo5nkcJAwugdHf5iB8nHkeBwmDS2D0tzgIn2Kex0HC4BIY/c8chGOY53GQMLgERn+Dg3As
        8zwOEgaXwOh/5CB8mnkeBwmDS2D0P3AQjmOex0HC4BIY/XUOwvHM8zhIGFwCo/+Wg3AC8zwOEgaXwOiv
        cRBOZJ7HQcLgEhj9VQ7CSczzOEgYXAKjH+YgfIZ5HgcJg0tg9Fc4CCczz+MgYXAJjP4yB+EU5nkcJAwu
        gdFf4iCcyjyPg4TBJTD6bzgIpzHP4yBhcAmM/iIH4XPM8zhIGFwCo7/AQTideR4HCYNLYPTnOQhnMM/j
        IGFwCYz+HAfh88zzOEgYXAKj/5qDcCbzPA4SBpfA6L/iIJzFPI+DhMElMPqzHISzmedxkDC4BEZ/hoNw
        DvM8DhIGl8DoT3MQzmWex0HC4BIY/SkOwnnM8zhIGFwCoz/JQfgC8zwOEgaXwOhPcBDOZ57HQcLgEhj9
        cQ7CBczzOEgYXAKjP8ZB+CLzPA4SBpfA6I9yEL7MPI+DhMElMPojHISvMM/jIGFwCYz+MAfhq8zzOEgY
        XAKjP8RBuIh5HgcJg0tg9F9yEC5mnsdBwuASGP0XHIRLmOdxkDC4BEZ/kINwKfM8DhIGl8DoD3AQLmOe
        x0HC4BIY/X4OwuXM8zhIGFwCo/+Mg/A15nkcJAwugdHv4yBcwTyPg4TBJTD6TzkIVzLP4yBhcAmM/hMO
        wlXM8zhIGFwCo/+Yg3A18zwOEgaXwOj3chCuYZ7HQcLgEhj9Hg7CtczzOEgYXAKj/4iDcB3zPA4SBpfA
        6D/kIHyTeR4HCYNLYPQfcBCuZ57HQcLgEhj9bg7CDczzOEgYXAKj38VBuJF5HgcJg0tg9O9zEG5insdB
        wuASGP17HISbmedxkDC4BEb/DgfhFuZ5HCQMLoHR7+Qg3Mo8j4OEwSUw+h0chG8xz+MgYXAJjH47B+E2
        5nkcJAwugdG/zUE4xDyPg4TBJTD6IQ7Ct5nncZAwuARGv42DcDvzPA4SBpfA6N/iINzBPI+DhMElMPqt
        HIQ7medxkDC4BEa/hYPwXeZ5HCQMLoHRb+YgfI95HgcJg0tg9Js4CN9nnsdBwuASGP1GDsJdzPM4SBhc
        AqPfwEG4m3keBwmDS2D06zkIP2Cex0HC4BIY/RschB8yz+MgYXAJjH4dB+FHzPM4SBhcAqNfy0G4h3ke
        BwmDS2D0azgI9zLP4yBhcAmMfjUH4cfM8zhIGFwCo1/FQfgJ8zwOEgaXwOhXchB+yjyPg4TBJTD6FRyE
        +5jncZAwuARG/xoH4efM8zhIGFwCo1/OQbifeR4HCYNLYPTLOAgPMM/jIGFwCYx+KQfhQeZ5HCQMLoHR
        L+Eg/IJ5HgcJg0tg9Is5CL9knsdBwuASGP0iDsJDzPM4SBhcAqN/lYPwMPM8DhIGl8DoX+EgPMI8j4OE
        wSUw+pc4CI8yz+MgYXAJjP5FDsJjzPM4SBhcAqNfwEF4nHkeBwmDS2D08zkITzDP4yBhcAmM/gUOwpPM
        8zhIGFwCo5/HQXiKeR4HCYNLYPRzOQhPM8/jIGFwCYx+DgfhGeZ5HCQMLoHRz+YgPMs8j4OEwSUw+lkc
        hF8xz+MgYXAJjH4mB+HXzPM4SBhcAqN/noPwHPM8DhIGl8DoZ3AQnmeex0HC4BIY/XQOwgvM8zhIGFwC
        o3+Wg/Ai8zwOEgaXwOincRB+wzyPg4TBJTD6qRyEl5jncZAwuARGP4WD8DLzPA4SBpfA6CdzEF5hnsdB
        wuASGP0zHITDzPM4SBhcAqOfxEF4lXkeBwmDS2D0EzkIrzHP4yBhcAmMfgIH4XfM8zhIGFwCox/PQXid
        eR4HCYNLYPTjOAi/Z57HQcLgEhj90xyEPzLP4yBhcAmMfiwH4Q3meRwkDC6B0Y/hIPyZeR4HCYNLYPRP
        chDeYp7HQcLgEhj9ExyEvzDP4yBhcAmMfjQH4a/M8zhIGFwCo3+Mg/A35nkcJAwugdE/ykF4h3keBwmD
        S2D0ozgI7zLP4yBhcAmM/vULL7zwgrP+7eR/MM/joYTBJTD6WjyUMLg0+h48lDC4NPoePJQwuDT6HjyU
        MLg0+h48lDC4NPoePJQwuDT6HjyUMLg0+h48lDC4BEa/59gP6D8wHji+QhjmHeIgHGKex0HC4NLojX7g
        +AphmNfojd7oB46vEIZ5jd7ojX7g+AphmNfojd7oB46vEIZ5jd7ojX7g+AphmNfojd7oB46vEIZ5jd7o
        jX7g+AphmPfenz7gPeZ5PJQwuARGX4uHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cS
        BpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bf
        g4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIG
        l0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+D
        hxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaX
        Rt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OH
        EgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG
        34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cSBpdG34OHEgaXRt+DhxIGl0bfg4cS
        BpdG34OHEgaXRt+DhxIGl0bfg4cSBpcjF/2Y+h94KOHxXI5c9Pr/8Xgujb4Rj+fS6BvxeC6NvhGP59Lo
        G/F4Lo2+EY/n0ugb8Xgujb4Rj+fS6BvxeC7u33+zPgQez8UdvRZq9ECNHqjRAzV6oEYP1OiBGj1Qowdq
        9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiBGj1Q
        owdq9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiB
        Gj1Qowdq9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP
        1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiBGj1Qowdq9ECNHqjRAzV6oEYP1OiBGj3O++//CyP3rHayDfxM
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>